// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod fermyon {
    pub mod spin {
        #[allow(clippy::all)]
        pub mod redis_types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// General purpose error.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Error {
                Success,
                Error,
            }
            impl Error {
                pub fn name(&self) -> &'static str {
                    match self {
                        Error::Success => "success",
                        Error::Error => "error",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                        Error::Success => "",
                        Error::Error => "",
                    }
                }
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Error")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for Error {}

            impl Error {
                pub(crate) unsafe fn _lift(val: u8) -> Error {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Error::Success,
                        1 => Error::Error,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// The message payload.
            pub type Payload = _rt::Vec<u8>;
        }
    }
}
pub mod exports {
    pub mod fermyon {
        pub mod spin {
            #[allow(clippy::all)]
            pub mod inbound_redis {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Payload = super::super::super::super::fermyon::spin::redis_types::Payload;
                pub type Error = super::super::super::super::fermyon::spin::redis_types::Error;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_message_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    let len0 = arg1;
                    let result1 =
                        T::handle_message(_rt::Vec::from_raw_parts(arg0.cast(), len0, len0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr2.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    };
                    ptr2
                }
                pub trait Guest {
                    /// The entrypoint for a Redis handler.
                    fn handle_message(message: Payload) -> Result<(), Error>;
                }
                #[doc(hidden)]

                macro_rules! __export_fermyon_spin_inbound_redis_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "fermyon:spin/inbound-redis#handle-message"]
          unsafe extern "C" fn export_handle_message(arg0: *mut u8,arg1: usize,) -> *mut u8 {
            $($path_to_types)*::_export_handle_message_cabi::<$ty>(arg0, arg1)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_fermyon_spin_inbound_redis_cabi;
                #[repr(align(1))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 2]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 2]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::vec::Vec;
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_inboud_redis_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::fermyon::spin::inbound_redis::__export_fermyon_spin_inbound_redis_cabi!($ty with_types_in $($path_to_types_root)*::exports::fermyon::spin::inbound_redis);
  )
}
#[doc(inline)]
pub(crate) use __export_inboud_redis_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:inboud-redis:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 470] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd3\x02\x01A\x02\x01\
A\x06\x01B\x08\x01m\x02\x07success\x05error\x04\0\x05error\x03\0\0\x01p}\x04\0\x07\
payload\x03\0\x02\x01q\x02\x05int64\x01x\0\x06binary\x01\x03\0\x04\0\x0fredis-pa\
rameter\x03\0\x04\x01q\x04\x03nil\0\0\x06status\x01s\0\x05int64\x01x\0\x06binary\
\x01\x03\0\x04\0\x0credis-result\x03\0\x06\x03\x01\x18fermyon:spin/redis-types\x05\
\0\x02\x03\0\0\x07payload\x02\x03\0\0\x05error\x01B\x07\x02\x03\x02\x01\x01\x04\0\
\x07payload\x03\0\0\x02\x03\x02\x01\x02\x04\0\x05error\x03\0\x02\x01j\0\x01\x03\x01\
@\x01\x07message\x01\0\x04\x04\0\x0ehandle-message\x01\x05\x04\x01\x1afermyon:sp\
in/inbound-redis\x05\x03\x04\x01\x19fermyon:spin/inboud-redis\x04\0\x0b\x12\x01\0\
\x0cinboud-redis\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-componen\
t\x070.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
