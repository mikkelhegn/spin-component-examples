// Generated by `wit-bindgen` 0.21.0. DO NOT EDIT!
// Options used:
pub mod fermyon {
    pub mod spin {
        #[allow(clippy::all)]
        pub mod redis_types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// General purpose error.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Error {
                Success,
                Error,
            }
            impl Error {
                pub fn name(&self) -> &'static str {
                    match self {
                        Error::Success => "success",
                        Error::Error => "error",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                        Error::Success => "",
                        Error::Error => "",
                    }
                }
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Error")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for Error {}

            impl Error {
                pub(crate) unsafe fn _lift(val: u8) -> Error {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Error::Success,
                        1 => Error::Error,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// The message payload.
            pub type Payload = _rt::Vec<u8>;
        }

        #[allow(clippy::all)]
        pub mod inbound_redis {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Payload = super::super::super::fermyon::spin::redis_types::Payload;
            pub type Error = super::super::super::fermyon::spin::redis_types::Error;
            #[allow(unused_unsafe, clippy::all)]
            /// The entrypoint for a Redis handler.
            pub fn handle_message(message: &Payload) -> Result<(), Error> {
                unsafe {
                    #[repr(align(1))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                    let vec0 = message;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fermyon:spin/inbound-redis")]
                    extern "C" {
                        #[link_name = "handle-message"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = ();
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(*ptr1.add(1).cast::<u8>());

                                super::super::super::fermyon::spin::redis_types::Error::_lift(
                                    l3 as u8,
                                )
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::vec::Vec;
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    extern crate alloc as alloc_crate;
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.21.0:cloud-event:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 477] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xdb\x02\x01A\x02\x01\
A\x06\x01B\x08\x01m\x02\x07success\x05error\x04\0\x05error\x03\0\0\x01p}\x04\0\x07\
payload\x03\0\x02\x01q\x02\x05int64\x01x\0\x06binary\x01\x03\0\x04\0\x0fredis-pa\
rameter\x03\0\x04\x01q\x04\x03nil\0\0\x06status\x01s\0\x05int64\x01x\0\x06binary\
\x01\x03\0\x04\0\x0credis-result\x03\0\x06\x03\x01\x18fermyon:spin/redis-types\x05\
\0\x02\x03\0\0\x07payload\x02\x03\0\0\x05error\x01B\x07\x02\x03\x02\x01\x01\x04\0\
\x07payload\x03\0\0\x02\x03\x02\x01\x02\x04\0\x05error\x03\0\x02\x01j\0\x01\x03\x01\
@\x01\x07message\x01\0\x04\x04\0\x0ehandle-message\x01\x05\x03\x01\x1afermyon:sp\
in/inbound-redis\x05\x03\x04\x01!component:cloud-event/cloud-event\x04\0\x0b\x11\
\x01\0\x0bcloud-event\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-com\
ponent\x070.201.0\x10wit-bindgen-rust\x060.21.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
