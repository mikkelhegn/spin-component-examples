// Generated by `wit-bindgen` 0.18.0. DO NOT EDIT!
pub mod exports {
  pub mod component {
    pub mod business_logic {
      
      #[allow(clippy::all)]
      pub mod handle_data {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        /// The my-object record, aka. the object to pass between the two components.
        #[derive(Clone)]
        pub struct MyObject {
          pub name: wit_bindgen::rt::string::String,
          pub steps: u32,
          pub processed: Option<bool>,
        }
        impl ::core::fmt::Debug for MyObject {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("MyObject").field("name", &self.name).field("steps", &self.steps).field("processed", &self.processed).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "component:business-logic/handle-data#handle-data"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_handle_data(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let result1 = <_GuestImpl as Guest>::handle_data(MyObject{
              name: wit_bindgen::rt::string_lift(bytes0),
              steps: arg2 as u32,
              processed: match arg3 {
                0 => None,
                1 => {
                  let e = wit_bindgen::rt::bool_lift(arg4 as u8);
                  Some(e)
                }
                _ => wit_bindgen::rt::invalid_enum_discriminant(),
              },
            });
            let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
            let MyObject{ name:name3, steps:steps3, processed:processed3, } = result1;
            let vec4 = (name3.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr() as i32;
            let len4 = vec4.len() as i32;
            ::core::mem::forget(vec4);
            *((ptr2 + 4) as *mut i32) = len4;
            *((ptr2 + 0) as *mut i32) = ptr4;
            *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(steps3);
            match processed3 {
              Some(e) => {
                *((ptr2 + 12) as *mut u8) = (1i32) as u8;
                *((ptr2 + 13) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
              },
              None => {
                {
                  *((ptr2 + 12) as *mut u8) = (0i32) as u8;
                }
              },
            };ptr2
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_component:business-logic/handle-data#handle-data"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_handle_data(arg0: i32,) {
              let l0 = *((arg0 + 0) as *const i32);
              let l1 = *((arg0 + 4) as *const i32);
              wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
            }
          };
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          /// The function to pass on the my-object to.
          fn handle_data(key: MyObject,) -> MyObject;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 16]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 16]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:business-logic"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 297] = [0, 97, 115, 109, 13, 0, 1, 0, 0, 25, 22, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 101, 110, 99, 111, 100, 105, 110, 103, 4, 0, 7, 165, 1, 1, 65, 2, 1, 65, 2, 1, 66, 5, 1, 107, 127, 1, 114, 3, 4, 110, 97, 109, 101, 115, 5, 115, 116, 101, 112, 115, 121, 9, 112, 114, 111, 99, 101, 115, 115, 101, 100, 0, 4, 0, 9, 109, 121, 45, 111, 98, 106, 101, 99, 116, 3, 0, 1, 1, 64, 1, 3, 107, 101, 121, 2, 0, 2, 4, 0, 11, 104, 97, 110, 100, 108, 101, 45, 100, 97, 116, 97, 1, 3, 4, 1, 36, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 98, 117, 115, 105, 110, 101, 115, 115, 45, 108, 111, 103, 105, 99, 47, 104, 97, 110, 100, 108, 101, 45, 100, 97, 116, 97, 5, 0, 4, 1, 39, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 98, 117, 115, 105, 110, 101, 115, 115, 45, 108, 111, 103, 105, 99, 47, 98, 117, 115, 105, 110, 101, 115, 115, 45, 108, 111, 103, 105, 99, 4, 0, 11, 20, 1, 0, 14, 98, 117, 115, 105, 110, 101, 115, 115, 45, 108, 111, 103, 105, 99, 3, 0, 0, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 50, 49, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 56, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
