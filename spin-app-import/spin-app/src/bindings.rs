// Generated by `wit-bindgen` 0.18.0. DO NOT EDIT!
pub mod component {
  pub mod business_logic {
    
    #[allow(clippy::all)]
    pub mod handle_data {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// The my-object record, aka. the object to pass between the two components.
      #[derive(Clone, serde::Deserialize, serde::Serialize)]
      pub struct MyObject {
        pub name: wit_bindgen::rt::string::String,
        pub steps: u32,
        pub processed: Option<bool>,
      }
      impl ::core::fmt::Debug for MyObject {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("MyObject").field("name", &self.name).field("steps", &self.steps).field("processed", &self.processed).finish()
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// The function to pass on the my-object to.
      pub fn handle_data(key: &MyObject,) -> MyObject{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 16]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let MyObject{ name:name0, steps:steps0, processed:processed0, } = key;
          let vec1 = name0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let (result2_0,result2_1,) = match processed0 {
            Some(e) => (1i32, match e { true => 1, false => 0 }),
            None => {
              (0i32, 0i32)
            },
          };let ptr3 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "component:business-logic/handle-data")]
          extern "C" {
            #[link_name = "handle-data"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, wit_bindgen::rt::as_i32(steps0), result2_0, result2_1, ptr3);
          let l4 = *((ptr3 + 0) as *const i32);
          let l5 = *((ptr3 + 4) as *const i32);
          let len6 = l5 as usize;
          let bytes6 = Vec::from_raw_parts(l4 as *mut _, len6, len6);
          let l7 = *((ptr3 + 8) as *const i32);
          let l8 = i32::from(*((ptr3 + 12) as *const u8));
          MyObject{
            name: wit_bindgen::rt::string_lift(bytes6),
            steps: l7 as u32,
            processed: match l8 {
              0 => None,
              1 => {
                let e = {
                  let l9 = i32::from(*((ptr3 + 13) as *const u8));
                  
                  wit_bindgen::rt::bool_lift(l9 as u8)
                };
                Some(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            },
          }
        }
      }
      
    }
    
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:spin-http-component"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 312] = [0, 97, 115, 109, 13, 0, 1, 0, 0, 25, 22, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 101, 110, 99, 111, 100, 105, 110, 103, 4, 0, 7, 175, 1, 1, 65, 2, 1, 65, 2, 1, 66, 5, 1, 107, 127, 1, 114, 3, 4, 110, 97, 109, 101, 115, 5, 115, 116, 101, 112, 115, 121, 9, 112, 114, 111, 99, 101, 115, 115, 101, 100, 0, 4, 0, 9, 109, 121, 45, 111, 98, 106, 101, 99, 116, 3, 0, 1, 1, 64, 1, 3, 107, 101, 121, 2, 0, 2, 4, 0, 11, 104, 97, 110, 100, 108, 101, 45, 100, 97, 116, 97, 1, 3, 3, 1, 36, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 98, 117, 115, 105, 110, 101, 115, 115, 45, 108, 111, 103, 105, 99, 47, 104, 97, 110, 100, 108, 101, 45, 100, 97, 116, 97, 5, 0, 4, 1, 49, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 115, 112, 105, 110, 45, 104, 116, 116, 112, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 47, 115, 112, 105, 110, 45, 104, 116, 116, 112, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 4, 0, 11, 25, 1, 0, 19, 115, 112, 105, 110, 45, 104, 116, 116, 112, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 3, 0, 0, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 50, 49, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 56, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
